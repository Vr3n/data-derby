/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as TeamsNameImport } from './routes/teams/$name'
import { Route as CompetitionsNameIndexImport } from './routes/competitions/$name/index'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamsNameRoute = TeamsNameImport.update({
  id: '/teams/$name',
  path: '/teams/$name',
  getParentRoute: () => rootRoute,
} as any)

const CompetitionsNameIndexRoute = CompetitionsNameIndexImport.update({
  id: '/competitions/$name/',
  path: '/competitions/$name/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/teams/$name': {
      id: '/teams/$name'
      path: '/teams/$name'
      fullPath: '/teams/$name'
      preLoaderRoute: typeof TeamsNameImport
      parentRoute: typeof rootRoute
    }
    '/competitions/$name/': {
      id: '/competitions/$name/'
      path: '/competitions/$name'
      fullPath: '/competitions/$name'
      preLoaderRoute: typeof CompetitionsNameIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/teams/$name': typeof TeamsNameRoute
  '/competitions/$name': typeof CompetitionsNameIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/teams/$name': typeof TeamsNameRoute
  '/competitions/$name': typeof CompetitionsNameIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/teams/$name': typeof TeamsNameRoute
  '/competitions/$name/': typeof CompetitionsNameIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/teams/$name' | '/competitions/$name'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/teams/$name' | '/competitions/$name'
  id: '__root__' | '/' | '/about' | '/teams/$name' | '/competitions/$name/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  TeamsNameRoute: typeof TeamsNameRoute
  CompetitionsNameIndexRoute: typeof CompetitionsNameIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  TeamsNameRoute: TeamsNameRoute,
  CompetitionsNameIndexRoute: CompetitionsNameIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/teams/$name",
        "/competitions/$name/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/teams/$name": {
      "filePath": "teams/$name.tsx"
    },
    "/competitions/$name/": {
      "filePath": "competitions/$name/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
